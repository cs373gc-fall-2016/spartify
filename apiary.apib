FORMAT: 1A
HOST: http://opensourcery.me/

# OPENSOURCERY API
API for http://opensourcery.me

## Project [/api/projects/{id}]
Represents a single project.

Required attributes: 

- `id`              The unique ID of the Project
- `name`            The name of the Project
- `url`             The url of the Project
- `languages`       A list of language names used in the Project
- `contributor_ids` A list of contributor IDs that contributed to the Project
- `description`     A description of the Project
- `owner_id`        ID of the company that owns the project

+ Parameters
    + id (required, integer) ... Unique ID

+ Model (application/json)

    + Body

            {
                "id" : 10,
                "name": "Example Project",
                "url" : "http://github.com/example_project",
                "languages" : ["JavaScript", "Python"],
                "contributor_ids": [1, 2],
                "owner_id": 1
            }
            {
                "id" : 11,
                "name": "tesseract.js",
                "url" : "https://github.com/naptha",
                "languages" : ["JavaScript", "HTML", "CSS"],
                "contributors": ["bijection", "antimatter15", "zzarcon", "hemanth", "rowasc", "jayathungek", "helloandre", "katamaritaco", "andrewthehan", "radarhere"],
                "owner": "Naptha"
            }
            {
                "id": 12,
                "name":"sanic",
                "url" :"https://github.com/channelcat/sanic",
                "languages": "[Python]",
                "contributors": "["channelcat", "seemethere", "cbess", "jpiasetz", "cclauss", "radarhere", "mindflayer", "bikegriffith", "JD557", "abhishek7", "kolanos", "KhasanovBI"]"
                "owner": "channelcat"

            }
            
## Retrieve a single Project [GET]

+ Response 200

    [Project][]
    
+ Response 404 (application/json)

        "Resource not found" 


# Project List [/api/projects]
Get all projects.

+ Model (application/json)

    + Body

            [
                {
                    "id" : 10,
                    "name": "Example Project",
                    "url" : "http://github.com/example_project",
                    "languages" : ["JavaScript", "Python"],
                    "contributor_ids": [1, 2],
                    "owner_id": 1
                },
                {
                   "id" : 10,
                    "name": "Example Project2",
                    "url" : "http://github.com/example_project2",
                    "languages" : ["Java"],
                    "contributor_ids": [3, 4],
                    "owner_id": 2
                }
            ]
            

## List all projects [GET]

+ Response 200

    [Project List][]

## Company [/api/companies/{id}]
Represents a single company.

Required attributes: 

- `id`              A unique ID
- `name`            The name of the company
- `url`             URL for the company
- `project_ids`     A list of project ids for projects owned by the Company
- `member_ids`      A list of contributor ids for contributors that belong to the company
- `description`     A description of the company

+ Parameters
    + id (required, integer) ... Unique ID

+ Model (application/json)

    + Body

            {
                "id": 2,
                "name": "Google",
                "url" : "http://github.com/google",
                "project_ids": [10, 12],
                "member_ids": [3, 4],
                "description": "Google is a a company focused on ..."
            }
            
## Retrieve a single Company [GET]

+ Response 200

    [Company][]
    
+ Response 404 (application/json)

        "Resource not found" 


# Company List [/api/companies]
Get all companies.

+ Model (application/json)

    + Body

            [
                {
                    "id": 2,
                    "name": "Google",
                    "url" : "http://github.com/google",
                    "project_ids": [10, 12],
                    "member_ids": [3, 4],
                    "description": "Google is a a company focused on ..."
                },
                {
                    "id": 1,
                    "name": "Microsoft",
                    "url" : "http://github.com/microsoft",
                    "project_ids": [2, 20],
                    "member_ids": [1, 3, 4]
                    "description": "Microsoft is a company focused on ..."
                }
            ]
            

## List all companies [GET]

+ Response 200

    [Company List][]

## Contributor [/api/contributors/{id}]
Represents a single contributor.

Required attributes: 

- `id`          A unique ID
- `username`    The username of the contributor
- `email`       The email address of the contributor
- `url`         The URL for the contributor
- `project_ids` A list of project ids for which the contributor contributes
- `company_ids` A list of company ids for which the contributor is a member

+ Parameters
    + id (required, integer) ... Unique ID

+ Model (application/json)

    + Body

            {
                "id": 2,
                "username": "usr1",
                "email": "usr1@example.com",
                "url": http://github.com/user1,
                "project_ids": [1, 2],
                "company_ids": [3, 4]
            }
            
## Retrieve a single Contributor [GET]

+ Response 200

    [Contributor][]
    
+ Response 404 (application/json)

        "Resource not found" 


# Contributor List [/api/contributors]
Get all contributors.

+ Model (application/json)

    + Body

            [
                {
                    "id": 1,
                    "username": "usr1",
                    "email": "usr1@example.com",
                    "url": http://github.com/user1,
                    "project_ids": [1, 2],
                    "company_ids": [3, 4]
                },
                {
                    "id": 2,
                    "username": "usr2",
                    "email": "usr2@example.com",
                    "url": http://github.com/user2,
                    "project_ids": [4, 5],
                    "company_ids": [3]
                }
            ]
            

## List all Contributors [GET]

+ Response 200

    [Contributor List][]

## Language [/api/languages/{name}]
Represents a single language.

Required attributes: 

- `name`            The name of the language
- `creator`         The creator of the language
- `description`     A description of the language
- `project_ids`     A list of project ids that use this language
- `paradigms`       A list of programming paradigms the language uses

+ Parameters
    + name (required, string) ... Unique name

+ Model (application/json)

    + Body

            {
                "name": "Python",
                "creator": "Guido van Rossum",
                "project_ids": ["project1","project2"],
                "description": "Python is scripting language for ...",
                "paradigms" : ["Functional", "Object Oriented"]
            }
            
## Retrieve a single Language [GET]

+ Response 200

    [Language][]
    
+ Response 404 (application/json)

        "Resource not found" 


# Language List [/api/languages]
Get all languages.

+ Model (application/json)

    + Body

            [
                {
                    "name": "Python",
                    "creator": "Guido van Rossum",
                    "project_ids": [1,2],
                    "description": "Python is a programming language for ...",
                    "paradigms" : ["Functional", "Object Oriented"]
                },
                {
                    "name": "Java",
                    "creator": "James Gosling",
                    "project_ids": [4,10],
                    "description": "Java is a programming language for ...",
                    "paradigms" : ["Object Oriented"]
                }
            ]
            

## List all Languages [GET]

+ Response 200

    [Language List][]